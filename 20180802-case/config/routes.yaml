index:
    path: /
    controller: App\Controller\BookController::index
register:
  path: /registeruser
  controller: App\Controller\UserRegistrationController::register

profile:
  path: /profile
  controller: App\Controller\UserController::profile

login:
  #delegate login to security controller https://symfony.com/doc/current/security/form_login_setup.html
  path: /login
  #controller: App\Controller\UserController::login
  controller: App\Controller\SecurityController::login

logout:
  path: /logout
  controller: App\Controller\UserController::logout

user_delete:
  path: /user/delete
  controller: App\Controller\UserController::delete

authors:
#  some magic for security and prevention too long lists, see http://symfony.com/doc/current/routing.html#giving-placeholders-a-default-value
  path: /authors/{page}/{filter}
  controller: App\Controller\AuthorController::index
  methods:    [GET, HEAD]
  defaults:
    page: 1
#    null filter by default, for more complex conditions, please, laak at http://symfony.com/doc/current/routing/conditions.html
    filter: null
  requirements:
    page: '\d+'
#    @TODO route matched only for requests with filter, longer than X chars, excluding newlines and other buggy chars
#    filter:

#  %TODO nested & parametrized route's names, is it possible ?

author_new:
  path: /author/new
  controller: App\Controller\AuthorController::new

author_show:
  path: /author/show/{id<\d+>}
  controller: App\Controller\AuthorController::show
  methods:    [GET, HEAD]

author_edit:
  path: /author/edit/{id<\d+>}
  controller: App\Controller\AuthorController::edit

author_delete:
  path: /author/delete/{id<\d+>}
  controller: App\Controller\AuthorController::delete
  methods:    [DELETE]


#genres
genres:
  #  some magic for security and prevention too long lists, see http://symfony.com/doc/current/routing.html#giving-placeholders-a-default-value
  path: /genres/{page}/{filter}
  controller: App\Controller\GenreController::index
  methods:    [GET, HEAD]
  defaults:
    page: 1
    #    null filter by default, for more complex conditions, please, laak at http://symfony.com/doc/current/routing/conditions.html
    filter: null
  requirements:
    page: '\d+'
#    @TODO route matched only for requests with filter, longer than X chars, excluding newlines and other buggy chars
#    filter:

#  %TODO nested & parametrized route's names, is it possible ?

genre_new:
  path: /genre/new
  controller: App\Controller\GenreController::new

genre_show:
  path: /genre/show/{id<\d+>}
  controller: App\Controller\GenreController::show
  methods:    [GET, HEAD]

genre_edit:
  path: /genre/edit/{id<\d+>}
  controller: App\Controller\GenreController::edit

genre_delete:
  path: /genre/delete/{id<\d+>}
  controller: App\Controller\GenreController::delete
  methods:    [DELETE]


#books
books:
  #  some magic for security and prevention too long lists, see http://symfony.com/doc/current/routing.html#giving-placeholders-a-default-value
  path: /books/{page}/{filter}
  controller: App\Controller\BookController::index
  methods:    [GET, HEAD]
  defaults:
    page: 1
    #    null filter by default, for more complex conditions, please, laak at http://symfony.com/doc/current/routing/conditions.html
    filter: null
  requirements:
    page: '\d+'
#    @TODO route matched only for requests with filter, longer than X chars, excluding newlines and other buggy chars
#    filter:

#  %TODO nested & parametrized route's names, is it possible ?

book_new:
  path: /book/new
  controller: App\Controller\BookController::new

book_show:
  path: /book/show/{id<\d+>}
  controller: App\Controller\BookController::show
  methods:    [GET, HEAD]

book_edit:
  path: /book/edit/{id<\d+>}
  controller: App\Controller\BookController::edit

book_delete:
  path: /book/delete/{id<\d+>}
  controller: App\Controller\BookController::delete
  methods:    [DELETE]